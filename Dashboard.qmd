---
title: "Refugees"
format: dashboard
server: shiny
---


```{r}
#| context: setup
#| include: false

library(tidyverse)
library(refugees)
library(shiny)
library(ggplot2)
library(unhcrthemes)
library(scales)
library(tidymodels)
library(ggthemes)
library(unhcrthemes)
library(dplyr)
library(tidyr)
library(sf)
library(echarts4r)
library(ggiraph)
library(widgetframe)
library(plotly)
library(viridis)
library(DT)
library(gganimate)
```

# Country Data

## Top 10 Countries of Origin for Refugees

```{r}
ref_coo_10 <- refugees::population |>
  filter(year == 2022) |>
  summarise(refugees = sum(refugees, na.rm = TRUE) + sum(oip, na.rm = TRUE),
            .by = coo_name) |>
  slice_max(order_by = refugees, n = 10) |>
  ggplot(aes(refugees, reorder(coo_name, refugees))) +
  geom_col(fill = unhcr_pal(n = 1, "pal_blue"),
           width = 0.7) +
  geom_text(aes(label = label_comma()(refugees)),
            hjust = -0.2) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.4))) +
  labs(title = "Refugees and other people in need of international protection",
       subtitle = "By country of origin | end-2022",
       caption = "Source: UNHCR Refugee Data Finder") +
  theme_unhcr(font_size = 15,
              grid = FALSE,
              axis = FALSE,
              axis_title = FALSE,
              axis_text = "y")

ref_coo_10
```


## Which Nations Do Displaced People Belong To?
```{r}
# Load data

country_data <- refugees::population %>%
                filter(year >= 2012 & year <= 2022) %>%
                group_by(coo_name, coo_iso) %>%
                summarise(total_refugees = sum(refugees),
                          total_asylum = sum(asylum_seekers),
                          total_idps = sum(idps)) %>%
                ungroup()

country_data
poly_url <- "https://raw.githubusercontent.com/GDS-ODSSS/unhcr-dataviz-platform/master/data/geospatial/world_polygons_simplified.json"
line_url <- "https://raw.githubusercontent.com/GDS-ODSSS/unhcr-dataviz-platform/master/data/geospatial/world_lines_simplified.json"

# Add CRS to poly and join values from csv
poly_refugees <- read_sf(poly_url) |> 
  st_set_crs(4326) |> 
  left_join(country_data, by = c("color_code" = "coo_iso")) |> 
  mutate(legend = case_when(
    total_refugees < 1e4 ~ "<10k",
    total_refugees < 1e5 ~ "10k-100k",
    total_refugees < 1e6 ~ "100k-1M",
    is.na(total_refugees) ~ NA_character_,
    TRUE ~ ">1M"
  )) |> 
  mutate(legend = as_factor(legend) |> 
           fct_relevel("<10k", "10k-100k", "100k-1M", ">1M"))

poly_idps <- read_sf(poly_url) |> 
  st_set_crs(4326) |> 
  left_join(country_data, by = c("color_code" = "coo_iso")) |> 
  mutate(legend = case_when(
    total_idps < 1e4 ~ "<10k",
    total_idps < 1e5 ~ "10k-100k",
    total_idps < 1e6 ~ "100k-1M",
    is.na(total_idps) ~ NA_character_,
    TRUE ~ ">1M"
  )) |> 
  mutate(legend = as_factor(legend) |> 
           fct_relevel("<10k", "10k-100k", "100k-1M", ">1M"))
  

# Sort line type
line <- read_sf(line_url) |>
  mutate(
    type = as_factor(type) |>
      fct_relevel("solid", "dashed", "dotted", "dashed-dot")
  ) |> 
  st_set_crs(4326)
```
# Refugee & Displaced Population 

## Refugees
```{r}
ggplot() +
  geom_sf(data = poly_refugees,
          aes(fill = legend),
          color = "transparent") +
  geom_sf(data = line,
          aes(linetype = type),
          color = "white",
          linewidth = .25,
          show.legend = FALSE) +
  coord_sf(crs = st_crs('ESRI:54030'),
           expand = FALSE) +
  scale_linetype_manual(values = c(1, 2, 3, 4)) +
  scale_fill_unhcr_d(palette = "pal_blue") +
  labs(
    title = "Global refugee displacement by country of origin| 2021")+
  #   caption = "The boundaries and names shown and the designations used on this map do not imply official\nendorsement or acceptance by the United Nations.\nSource: UNHCR Refugee Data Finder\n© UNHCR, The UN Refugee Agency"
  # ) +
  theme_unhcr(void = TRUE)

```


## Global forcibly displaced population during last ten years
```{r}
fd_last_ten_years <- refugees::population |>
  filter(year >= 2012 & year <= 2022) |>
  summarise(refugees = sum(refugees, na.rm = TRUE),
            asylum_seekers = sum(asylum_seekers, na.rm = TRUE), 
            oip = sum(oip, na.rm = TRUE), .by = year) |>
  left_join(refugees::idmc |> 
              filter(year >= 2012 & year <= 2022) |>
              summarise(idmc = sum(total, na.rm = TRUE), .by = year), by=c("year")) |>
  left_join(refugees::unrwa |> 
              filter(year >= 2012 & year <= 2022) |>
              summarise(unrwa = sum(total, na.rm = TRUE), .by = year), by=c("year")) |>
  pivot_longer(cols = -year, names_to = "population_type", values_to = "total") |> 
  mutate(population_type=factor(population_type, levels=c("oip", "unrwa","asylum_seekers", "refugees","idmc")), 
             population_type=recode(population_type,
             refugees="Refugees under UNHCR’s mandate",
             asylum_seekers="Asylum-seekers",
             oip="Other people in need of international protection",
             idmc="Internally displaced persons",
             unrwa="Palestine refugees under UNRWA’s mandate")) |>
  arrange(year, population_type) |>
  ggplot() +
  geom_area(aes(x = year, y = total, fill = population_type)) +
  scale_fill_unhcr_d(palette = "pal_unhcr") +
  labs(y = "Number of people", caption = "Source: UNHCR Refugee Data Finder") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) +
  scale_y_continuous(expand = expansion(c(0, 0.1)), breaks= pretty_breaks(n = 5), labels = label_number(scale_cut = cut_long_scale())) +  
  theme_unhcr(font_size = 15,
    grid = "Y",
    axis = "x",
    axis_title = "y") +
    scale_fill_manual(values = c("#EF4A60", "#8EBEFF", "#18375F","#0072BC", "#00B398")) +
guides(fill = guide_legend(nrow = 3, byrow = TRUE, reverse = TRUE)) 
  
fd_last_ten_years
```


## Refugee Population Across UNHCR Regions

```{r}

df <- read_csv("https://raw.githubusercontent.com/GDS-ODSSS/unhcr-dataviz-platform/master/data/correlation/heatmap.csv")

# Plot
ggplot(
  df,
  aes(
    x = year,
    y = fct_rev(location)
  )
) +
  geom_tile(aes(
    fill = values
  ),
  color = "white",
  lwd = .5,
  linetype = 1
  ) +
  geom_text(
    aes(
      label = scales::number(values, accuracy = 0.1)
    ),
    color = if_else(df$values > 2, "white", unhcr_pal(n = 5, "pal_grey")[5]),
    size = 8 / .pt
  ) +
  labs(
    title = "Refugee population by region | 2011 - 2020",
    subtitle = "Number of people in millions",
    caption = "Source: UNHCR Refugee Data Finder\n© UNHCR, The UN Refugee Agency"
  ) +
  scale_x_continuous(
    expand = expansion(c(0, 0)),
    breaks = pretty_breaks(n = 10)
  ) +
  scale_y_discrete(
    labels = scales::label_wrap(17)
  ) +
  scale_fill_stepsn(
    colors = unhcr_pal(n = 5, "pal_blue"),
    n.break = 5
  ) +
  coord_fixed() +
  theme_unhcr(
    grid = FALSE,
    axis = FALSE,
    axis_title = FALSE,
    legend = FALSE
  )
```

# Asylum Applications

## Most Common Types of Asylum Applications

```{r}
filter_years <- asylum_decisions %>% 
filter(year %in% c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>% mutate(procedure_type_2 = case_when(
  procedure_type %in% c("G") ~ "Government",
  procedure_type %in% c("U") ~ "UNHCR",
  TRUE ~ "Joint"
))

filter_years$year <- as.factor(filter_years$year)

ggplot(filter_years, aes(x = year, fill = procedure_type_2)) +
  geom_bar() +
  labs(title = "Asylum Application Procedure Type | 2013-2022",
       x = "Year",
       y= NULL,
       fill = "Procedure Type") +
 theme_unhcr()+
  theme(legend.position = "bottom")
```

## Which Countries Accept Most Asylum Applications
```{r}
asy_dec <- asylum_decisions %>%
            filter(dec_recognized + dec_other + dec_rejected + dec_closed == dec_total) %>%
            mutate(acceptance_rate_pct = (dec_recognized + dec_other)/dec_total * 100) %>%
            arrange(desc(acceptance_rate_pct))

world <- map_data("world") %>%
  filter(region != "Antarctica")

lat_long <- read_csv(here::here("data", "world_country_and_usa_states_latitude_and_longitude_values.csv"))

asy_dec_loc <- asy_dec %>%
                left_join(lat_long, join_by("coa_name" == "country"))


sliding_map <- world %>%
  ggplot() +
  geom_polygon(aes(x = long, y = lat, group = group),
               fill = unhcr_pal(n = 5, "pal_grey")[2],
               color = "transparent",
               size = 0.01) +
  geom_point(data= asy_dec_loc, 
             aes(text = coa_name,
                 x = longitude, 
                 y = latitude, 
                 frame = year,
                 size = acceptance_rate_pct/2),
             color = unhcr_pal(n = 5, "pal_blue")[5],
             alpha = 0.2) +
  labs( title = "Asylum Application Acceptance Rate \n from 2000 to 2023",
        caption = "UNHCR") +
  theme_map() +
  scale_size_continuous(guide = F) +
  scale_color_discrete(name = "Type") +
  theme(plot.title = element_text(size = 14, hjust = 0.5, family = "Lato"))



app_map <- ggplotly(sliding_map) %>% animation_slider(currentvalue = list(prefix = "Year ", font = list(color="#8395B9")))

app_map
```

```{r}
#| context: server


approval_data <- reactive({
  countries_2 <- countries %>% rename(coo_name = name)
  asylum_decisions %>%
    mutate(year = factor(year)) %>%
    mutate(approved = dec_recognized + dec_other) %>%
    filter(year %in% c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>% 
    left_join(select(filter(countries_2, unhcr_region %in% input$region), coo_name, unhcr_region), by = "coo_name") %>%
    filter(unhcr_region!="NA")
    # group_by(year, unhcr_region, approved) %>%
    # count() %>%
    # ungroup() %>%
    # complete(year, unhcr_region, approved, fill = list(n = 0)) 
})

output$plot <- renderPlot({
  ggplot(approval_data(), aes(x = year, y = approved, fill = unhcr_region)) +
    geom_bar(stat = "identity", position = "stack") +
    labs(title = "Approved Asylum Decisions by UNHCR Region",
         x = "Year", y = "Number of Approved Decisions") +
    theme_unhcr() +
     scale_y_continuous(labels = label_number()) +
        theme(axis.text = element_text(size = 12),
          axis.title = element_text(size=16)) +
    coord_flip()
}) 

```



# Accepted Asylum Applications
```{r}
plotOutput('plot')

```


## {.sidebar}
```{r}
  checkboxGroupInput("region", label = h3("Choose UNHCR Region"),
                     choices = list("Asia and the Pacific" = "Asia and the Pacific",
                                    "Europe" = "Europe",
                                    "Southern Africa" = "Southern Africa",
                                    "The Americas" = "The Americas",
                                    "Middle East and North Africa" = "Middle East and North Africa",
                                    "East and Horn of Africa" = "East and Horn of Africa",
                                    "West and Central Africa" = "West and Central Africa"),
                     selected = "Asia and the Pacific")


```


```{r}
#| context: server


demographics_data <- reactive({
  filtered_data <- demographics %>%
    select(coo_name, year, m_total, f_total, acc_type) %>%
    filter(year %in% c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022"))%>%
    filter(coo_name %in% input$country) %>%
    # mutate(year = factor(year)) %>%
    filter(year %in% input$year) %>%
    pivot_longer(cols = c("f_total", "m_total"),
                 names_to = "gender",
                 values_to = "total_applications") %>%
    group_by(coo_name, gender,year) %>%
   
    summarise(total_applications = sum(total_applications, na.rm = TRUE))
})

output$plot_1 <- renderPlot({
  req(demographics_data())
  ggplot(demographics_data(), aes(x = gender, y = total_applications, fill = total_applications)) +
    geom_bar(stat = "identity") +
    # facet_wrap(~ acc_type) +
    labs(title = "Asylum Applications by Gender",
         x = "Gender", y = "Number of Applications") +
    theme_unhcr()+
    scale_y_continuous(labels = label_number()) +
    scale_fill_continuous(labels = scales::comma_format()) +
    theme(legend.key.height = unit(1, "cm"),  
          legend.key.width = unit(5, "cm")) +
    theme(axis.text = element_text(size = 12),
          axis.title = element_text(size=16)) 
})



```

# Demographics
```{r}
plotOutput('plot_1')

```

## {.sidebar}
```{r}

selectizeInput("country", "Choose Country of Origin:",
               choices = unique(demographics$coo_name),
               multiple = TRUE,
               options = list(
                 placeholder = 'Select country...', 
                 maxItems = 1
               )
)


sliderInput("year", "Select Year Range",
          min = 2013, max = 2022, value = c(2013, 2022), step = 1)



```



```{r}
# demographics_data <- demographics %>%
#    select(year, coo_name, f_total, m_total,acc_type) %>%
#  mutate(year = factor(year)) %>%
#    filter(year %in% c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>%
#    pivot_longer(cols= c("f_total", "m_total"),
#                 names_to="gender",
#                 values_to ="total_applications") %>%
#       group_by(coo_name,gender,acc_type) %>%
#     summarise(total_applications = sum(total_applications, na.rm = TRUE)) # You might need to summarise the total
# 
# 
# 
#  ggplot(demographics_data, aes(x = gender, y= total_applications , fill = total_applications)) +
# geom_bar(stat = "identity") +
# facet_wrap(~ acc_type) +
#    labs(title = "Application type by gender",
#           x = "Year", y = "Number of Applications") +
#      theme_unhcr() +
#       scale_y_continuous(labels = label_number())

 

```




```{r}

```



```{r}
# 
# #| context: server
# #| include: false
# 
# # Data Wrangling
# countries_2 <-  countries %>% rename(coo_name = name)
#  approval <-  asylum_decisions %>%
#       mutate(approved = dec_recognized + dec_other) %>%
#       filter(year== c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>%
#       left_join(countries_2, join_by(coo_name))
# 
# # Define UI
# ui <- fluidPage(
#   titlePanel("Asylum Decisions by UNHCR Region"),
    
#   sidebarLayout(
#     sidebarPanel(
#       checkboxGroupInput("regions", "Select UNHCR Regions:",
#                          choices = unique(approval$unhcr_region),
#                          selected = unique(approval$unhcr_region)[1])
#     ),
#     mainPanel(
#       plotOutput("asylum_plot")
#     )
#   )
# )
# 
# 
# # Define server logic
# server <- function(input, output) {
#   filtered_data <- reactive({
#     subset(approval, unhcr_region %in% input$regions)
#   })
#   
#   # Render plot
#   output$asylum_plot <- renderPlot({
#     ggplot(filtered_data(), aes(x = year, y = approved, color = unhcr_region)) +
#       geom_bar(stat="identity") +
#       labs(title = "Asylum Decisions by UNHCR Region",
#            x = "Year", y = "Number of Approved Decisions",
#            color = "UNHCR Region") +
#       theme_unhcr()
#   })
# }
# 
# # Run the application
# shinyApp(ui = ui, server = server)




```

```{r}
# 
# #| context: server
# #| include: false
# 
# # UI
# ui <- fluidPage(
#   titlePanel("Asylum Decisions Dashboard"),
#   tabsetPanel(
#     tabPanel("Plot", 
#       sidebarLayout(
#         sidebarPanel(
#           checkboxGroupInput("unhcr_region", label = h3("Choose UNHCR Region"),
#                              choices = list("Asia and the Pacific" = "Asia and the Pacific",
#                                             "Europe" = "Europe",
#                                             "Southern Africa" = "Southern Africa",
#                                             "The Americas" = "The Americas",
#                                             "Middle East and North Africa" = "Middle East and North Africa",
#                                             "East and Horn of Africa" = "East and Horn of Africa",
#                                             "West and Central Africa" = "West and Central Africa"),
#                              selected = "Asia and the Pacific")
#         ),
#         mainPanel(
#           plotOutput("asylum_plot")
#         )
#       )
#     ),
#     tabPanel("Summary",
#       fluidRow(
#         column(width = 6,
#           h3("Summary Plot"),
#           plotOutput("summary_plot")
#         ),
#         column(width = 6,
#           h3("Summary Table"),
#           tableOutput("summary_table")
#         )
#       )
#     )
#   )
# )
# 
# # Server
# server <- function(input, output) {
#   # Data Wrangling
#   countries_2 <- countries %>% rename(coo_name = name)
#   
#   approval <- asylum_decisions %>%
#     mutate(approved = dec_recognized + dec_other) %>%
#     filter(year == c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>%
#     left_join(countries_2, by = "coo_name")
#   
#   filtered_data <- reactive({
#     subset(approval, unhcr_region %in% input$unhcr_region)
#   })
#   
#   # Render plot
#   output$asylum_plot <- renderPlot({
#     ggplot(filtered_data(), aes(x = year, y = approved, color = unhcr_region)) +
#       geom_bar(stat = "identity") +
#       labs(title = "Asylum Decisions by UNHCR Region",
#            x = "Year", y = "Number of Approved Decisions",
#            color = "UNHCR Region") +
#       theme_unhcr()
#   })
#   
#   # Render summary plot
#   output$summary_plot <- renderPlot({
#     # Your code for summary plot
#   })
#   
#   # Render summary table
#   output$summary_table <- renderTable({
#     # Your code for summary table
#   })
# }
# 
# # Run the application
# shinyApp(ui = ui, server = server)



```




