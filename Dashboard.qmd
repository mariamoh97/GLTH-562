---
title: "Refugees"
format: dashboard
server: shiny
---


```{r}
#| context: setup
#| include: false

library(tidyverse)
library(refugees)
library(shiny)
library(ggplot2)
library(unhcrthemes)
library(scales)
```



```{r}
#| context: server


approval_data <- reactive({
  countries_2 <- countries %>% rename(coo_name = name)
  asylum_decisions %>%
    mutate(year = factor(year)) %>%
    mutate(approved = dec_recognized + dec_other) %>%
    filter(year %in% c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>% 
    left_join(select(filter(countries_2, unhcr_region %in% input$region), coo_name, unhcr_region), by = "coo_name") %>%
    filter(unhcr_region!="NA")
    # group_by(year, unhcr_region, approved) %>%
    # count() %>%
    # ungroup() %>%
    # complete(year, unhcr_region, approved, fill = list(n = 0)) 
})

output$plot <- renderPlot({
  ggplot(approval_data(), aes(x = year, y = approved, fill = unhcr_region)) +
    geom_bar(stat = "identity", position = "stack") +
    labs(title = "Asylum Decisions by UNHCR Region",
         x = "Year", y = "Number of Approved Decisions") +
    theme_unhcr() +
     scale_y_continuous(labels = label_number())
}) 

```


# Acceptd Asylum Applications 
```{r}
plotOutput('plot')

```


## {.sidebar}
```{r}
  checkboxGroupInput("region", label = h3("Choose UNHCR Region"),
                     choices = list("Asia and the Pacific" = "Asia and the Pacific",
                                    "Europe" = "Europe",
                                    "Southern Africa" = "Southern Africa",
                                    "The Americas" = "The Americas",
                                    "Middle East and North Africa" = "Middle East and North Africa",
                                    "East and Horn of Africa" = "East and Horn of Africa",
                                    "West and Central Africa" = "West and Central Africa"),
                     selected = "Asia and the Pacific")


```


```{r}


```



```{r}
# 
# #| context: server
# #| include: false
# 
# # Data Wrangling
# countries_2 <-  countries %>% rename(coo_name = name)
#  approval <-  asylum_decisions %>%
#       mutate(approved = dec_recognized + dec_other) %>%
#       filter(year== c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>%
#       left_join(countries_2, join_by(coo_name))
# 
# # Define UI
# ui <- fluidPage(
#   titlePanel("Asylum Decisions by UNHCR Region"),
    
#   sidebarLayout(
#     sidebarPanel(
#       checkboxGroupInput("regions", "Select UNHCR Regions:",
#                          choices = unique(approval$unhcr_region),
#                          selected = unique(approval$unhcr_region)[1])
#     ),
#     mainPanel(
#       plotOutput("asylum_plot")
#     )
#   )
# )
# 
# 
# # Define server logic
# server <- function(input, output) {
#   filtered_data <- reactive({
#     subset(approval, unhcr_region %in% input$regions)
#   })
#   
#   # Render plot
#   output$asylum_plot <- renderPlot({
#     ggplot(filtered_data(), aes(x = year, y = approved, color = unhcr_region)) +
#       geom_bar(stat="identity") +
#       labs(title = "Asylum Decisions by UNHCR Region",
#            x = "Year", y = "Number of Approved Decisions",
#            color = "UNHCR Region") +
#       theme_unhcr()
#   })
# }
# 
# # Run the application
# shinyApp(ui = ui, server = server)




```

```{r}
# 
# #| context: server
# #| include: false
# 
# # UI
# ui <- fluidPage(
#   titlePanel("Asylum Decisions Dashboard"),
#   tabsetPanel(
#     tabPanel("Plot", 
#       sidebarLayout(
#         sidebarPanel(
#           checkboxGroupInput("unhcr_region", label = h3("Choose UNHCR Region"),
#                              choices = list("Asia and the Pacific" = "Asia and the Pacific",
#                                             "Europe" = "Europe",
#                                             "Southern Africa" = "Southern Africa",
#                                             "The Americas" = "The Americas",
#                                             "Middle East and North Africa" = "Middle East and North Africa",
#                                             "East and Horn of Africa" = "East and Horn of Africa",
#                                             "West and Central Africa" = "West and Central Africa"),
#                              selected = "Asia and the Pacific")
#         ),
#         mainPanel(
#           plotOutput("asylum_plot")
#         )
#       )
#     ),
#     tabPanel("Summary",
#       fluidRow(
#         column(width = 6,
#           h3("Summary Plot"),
#           plotOutput("summary_plot")
#         ),
#         column(width = 6,
#           h3("Summary Table"),
#           tableOutput("summary_table")
#         )
#       )
#     )
#   )
# )
# 
# # Server
# server <- function(input, output) {
#   # Data Wrangling
#   countries_2 <- countries %>% rename(coo_name = name)
#   
#   approval <- asylum_decisions %>%
#     mutate(approved = dec_recognized + dec_other) %>%
#     filter(year == c("2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")) %>%
#     left_join(countries_2, by = "coo_name")
#   
#   filtered_data <- reactive({
#     subset(approval, unhcr_region %in% input$unhcr_region)
#   })
#   
#   # Render plot
#   output$asylum_plot <- renderPlot({
#     ggplot(filtered_data(), aes(x = year, y = approved, color = unhcr_region)) +
#       geom_bar(stat = "identity") +
#       labs(title = "Asylum Decisions by UNHCR Region",
#            x = "Year", y = "Number of Approved Decisions",
#            color = "UNHCR Region") +
#       theme_unhcr()
#   })
#   
#   # Render summary plot
#   output$summary_plot <- renderPlot({
#     # Your code for summary plot
#   })
#   
#   # Render summary table
#   output$summary_table <- renderTable({
#     # Your code for summary table
#   })
# }
# 
# # Run the application
# shinyApp(ui = ui, server = server)



```




