---
title: "Data Wrangling"
subtitle: "Tidy and relational data"
css: custom_report.css
output: 
  bookdown::html_document2:
    toc: true
    toc_float: true
    toc_depth: 1
    code_folding: show
    theme: default
    highlight: tango
    fig_captions: no
    number_sections: false
---

```{r setup, include=FALSE, warning = FALSE, message = FALSE}
  knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
  options(scipen=999) # turns off scientific notation

# define colors
  glhlth562_colors <- c(
    `blue`       = "#1f9ac9",
    `yellow`     = "#ffd966",
    `black`      = "#000000",
    `lightgrey`  = "#D3D3D3",
    `darkgrey`   = "#444444",
    `grey`       = "#808080"
  )

# load packages
  library(nycflights13)
  library(tidyverse)
```

# Tidy data

### Numeric data in column names

```{r}
billboard %>% 
  pivot_longer(
    cols = ___, 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )
```

### Long(er) formats are often good for plotting and certain models

```{r, echo=FALSE}
# create some data

set.seed(8675309)  # sets a random starting seed for sample()

long <- tibble(
  pid = c(rep(seq(1, 20, 1), 4)),
  round = c(rep("r_1", 20),
            rep("r_2", 20),
            rep("r_3", 20),
            rep("r_4", 20)),
  group = rep(c(rep("treatment", 10),
                rep("control", 10)),
              4),
  high_risk = rep(c(rep("Yes", 5),
                    rep("No", 5)),
                  8),
  score = c(sample(7:10, 10, replace = TRUE),
            sample(0:6, 10, replace = TRUE),
            sample(3:10, 10, replace = TRUE),
            sample(0:6, 10, replace = TRUE),
            sample(8:10, 10, replace = TRUE),
            sample(0:6, 10, replace = TRUE),
            sample(5:9, 10, replace = TRUE),
            sample(0:6, 10, replace = TRUE)
            )
)

long
```

### Sometimes you might want to pivot wider

```{r}
long %>%
  pivot_wider(names_from = ____, 
              values_from = _____) 
```

# Relational data

```{r}
flights2 <- flights %>% 
  select(year:day, hour, origin, dest, tailnum, carrier)
```

### Natural join

```{r}
flights2 %>% 
  left_join(weather)
```

### Specify common key

```{r}
flights2 %>% 
  left_join(planes, by = "tailnum")
```

### Keys have different names

```{r}
flights2 %>% 
  left_join(airports, c("dest" = "faa"))
```

```{r}
flights2 %>% 
  # rename("faa" = "dest") %>%
  # left_join(airports, join_by(faa))
  left_join(airports, join_by(dest == faa))
  # left_join(airports, c("dest" = "faa"))
```

