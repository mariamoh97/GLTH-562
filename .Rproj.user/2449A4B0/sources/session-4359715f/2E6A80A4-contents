---
title: "something"
author: "Aarushi Tripathi"
date: "2024-04-16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

options(scipen = 999)
library(tidyverse)
library(modeldata)
library(tidymodels)
library(refugees)

```



```{r}
  # rand_forest(mtry = 4, trees = 500, min_n = 1)
# 
# rf_mod <-
#   rand_forest() %>% 
#   set_engine("ranger") %>% 
#   set_mode("regression")
# rf_wf <-
#   tree_wf %>% 
#   update_model(rf_mod)
# set.seed(100)
# rf_wf %>% 
#   fit_resamples(resamples = alz_folds) %>% 
#   collect_metrics()
# 
# rf3_mod <- rf_mod %>% 
#   set_args(mtry = 3) 
# 
# rf8_mod <- rf_mod %>% 
#   set_args(mtry = 8) 
# 
# rf30_mod <- rf_mod %>% 
#   set_args(mtry = 30) 
# 
# rf3_wf <- rf_wf %>% 
#   update_model(rf3_mod)
# set.seed(100)
# rf3_wf %>% 
#   fit_resamples(resamples = alz_folds) %>% 
#   collect_metrics()
# 
# tree_wf <-
#   workflow() %>% 
#   add_formula(Class ~ .) %>% 
#   add_model(tree_mod)
# 
# set.seed(100)
# tree_wf %>% 
#   fit_resamples(resamples = alz_folds) %>% 
#   collect_metrics()
# 
 asy_dec_model <- asylum_decisions %>%
            filter(dec_recognized + dec_other + dec_rejected + dec_closed == dec_total) %>%
            mutate(acceptance_rate_pct = (dec_recognized + dec_other)/dec_total)
#  
#  rf_mod <- 
#   rand_forest() %>% 
#   set_engine("ranger") %>% 
#   set_mode("classification")
# rf_wf <-
#   workflow() %>% 
#   add_formula(Class ~ .) %>% 
#   add_model(rf_mod)
# 
# set.seed(100) # Important!
# rf_results <-
#   rf_wf %>% 
#   fit_resamples(resamples = alz_folds,
#                 metrics = metric_set(roc_auc))
# rf_results %>% 
#   collect_metrics()
# 

  set.seed(100) # Important!

  asylum_split  <- initial_split(asy_dec_model)
  asylum_train  <- training(asylum_split)
  asylum_test   <- testing(asylum_split)
  asylum_folds <- 
    vfold_cv(asylum_train, v = 10, strata = acceptance_rate_pct, breaks = 5)

  rf_mod <-
    rand_forest() %>%
    set_engine("ranger") %>%
    set_mode("regression")
  
  rf_wf <-
    workflow() %>% 
    add_formula(acceptance_rate_pct ~ coo_iso + coa_iso + procedure_type + dec_level + dec_pc) %>% 
    add_model(rf_mod)

  rf_tuner <-
    rand_forest(mtry = tune(),
                min_n = tune()) %>%
    set_engine("ranger") %>%
    set_mode("regression")
  
  # rf_wf <-
  #   workflow() %>%
  #   add_formula(acceptance_rate_pct ~ coo_iso + coa_iso + procedure_type + dec_level + dec_pc) %>%
  #   add_model(tree_mod)
  
  rf_wf <-
    rf_wf %>%
    update_model(rf_tuner)
  
  
  set.seed(100) # Important!
  rf_results <-
    rf_wf %>%
    tune_grid(resamples = asylum_folds,
              metrics = metric_set(rmse))

rf_results %>%
  collect_metrics()

# 
# 
# 
# 
#   forest_mod <- 
#   rand_forest(mtry = 3,
#               trees = 500,
#               min_n = 4) %>% 
#   set_engine(engine = "randomForest") %>% 
#   set_mode("regression")
#   forest_mod
#   
#   set.seed(100) # Important!
# 
#   asylum_split  <- initial_split(asy_dec)
#   asylum_train  <- training(asylum_split)
#   asylum_test   <- testing(asylum_split)
#   
#   rf_reg_fit <- forest_mod %>% 
#                 fit(acceptance_rate_pct ~ coo_iso + coa_iso + procedure_type + dec_level + dec_pc, 
#                                    data = asylum_train)
#   rf_reg_fit
```


```{r}
rf_results %>% 
  show_best(metric = "rmse", n = 5)

```
```{r}
rf_results %>% autoplot()

```
```{r}
asy_best <-
  rf_results %>% 
  select_best(metric = "rmse")

last_rf_workflow <- 
  rf_wf %>%
  finalize_workflow(asy_best)

fitted_workflow <- fit(last_rf_workflow, data = asylum_train)

fitted_workflow

# Predict on new data
predictions <- predict(fitted_workflow, new_data = asylum_test)
# last_rf_fit <-
#   last_rf_workflow %>% 
#   last_fit(split = asylum_split)

# last_rf_fit
```

```{r}
predictions
```

```{r}
last_rf_fit %>% 
  collect_metrics()

```

```{r}
last_rf_fit %>% 
  collect_predictions()

```

```{r}
  predict(rf_wf, asylum_test)
```
